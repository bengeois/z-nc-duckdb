#!/bin/bash
#
# This is script is vibe coded ü§∑
#
# ‚ö†Ô∏è YOU DON'T NEED TO LAUNCH THIS SCRIPT DURING THE NIGHT CLAZZ
# We used it to fill the bucket
# We would like to compare response times for equivalent requests to DuckLake

#-------------------------------------------------------------------------------
# CONFIGURATION
#-------------------------------------------------------------------------------
# Date de d√©but pour la g√©n√©ration des donn√©es (format YYYY-MM-DD).
START_DATE="2024-06-01"

# Nombre total de jours √† g√©n√©rer (ex: 366 pour une ann√©e compl√®te avec ann√©e bissextile).
NUM_DAYS=366

# Chemin vers le script Go.
GO_SCRIPT="./main.go"

# R√©pertoire de base pour les donn√©es (le script y cr√©era validations.json).
DATA_DIR="../../data"

# R√©pertoire de base pour les partitions Parquet.
HIVE_BASE_DIR="${DATA_DIR}/validations"

# Fichier JSON temporaire g√©n√©r√© par le script Go.
JSON_OUTPUT_FILE="${DATA_DIR}/validations.json"

# D√©finition des volumes de validations.
# ‚ö†Ô∏è IT CAN BE A LOT
MIN_VALIDATIONS=1000
MAX_VALIDATIONS=100000000
WEEKDAY_MIN=5000000
WEEKDAY_MAX=25000000
WEEKEND_MIN=200000
WEEKEND_MAX=1500000

#-------------------------------------------------------------------------------
# SCRIPT - Ne pas modifier en dessous de cette ligne
#-------------------------------------------------------------------------------

# Quitte le script si une commande √©choue.
set -e

echo "D√©marrage de la g√©n√©ration des donn√©es Parquet..."
echo "P√©riode : ${NUM_DAYS} jours √† partir du ${START_DATE}"
echo "----------------------------------------------------"

# S'assurer que le r√©pertoire de donn√©es existe.
mkdir -p "$DATA_DIR"

# D√©tecter le syst√®me d'exploitation une seule fois.
OS_TYPE=$(uname)

for i in $(seq 0 $(($NUM_DAYS - 1))); do
    # Calcul de date compatible pour Linux (GNU) et macOS (BSD).
    current_date=""
    year=""
    month=""
    day=""
    day_of_week=""
    
    if [[ "$OS_TYPE" == "Darwin" ]]; then
        # Syntaxe pour macOS / BSD
        read year month day day_of_week <<< $(date -v+${i}d -j -f "%Y-%m-%d" "$START_DATE" "+%Y %m %d %u")
    else
        # Syntaxe pour Linux / GNU
        read year month day day_of_week <<< $(date -d "$START_DATE + $i days" "+%Y %m %d %u")
    fi
    current_date="${year}-${month}-${day}"

    # --- Logique pour d√©terminer le nombre de validations ---
    num_validations=0
    
    # G√©n√®re un nombre al√©atoire entre 0 et 999.
    random_event=$((RANDOM % 1000))

    if [[ $random_event -eq 1 ]]; then
        num_validations=$MAX_VALIDATIONS
        echo "INFO: √âv√©nement RARE - Pic d'activit√© maximal !"
    elif [[ $random_event -eq 2 ]]; then
        num_validations=$MIN_VALIDATIONS
        echo "INFO: √âv√©nement RARE - Jour f√©ri√©/tr√®s faible activit√© !"
    elif [[ $day_of_week -ge 6 ]]; then
        # Weekend
        range=$(($WEEKEND_MAX - $WEEKEND_MIN))
        num_validations=$(($WEEKEND_MIN + (RANDOM % $range)))
    else
        # Jour de semaine
        range=$(($WEEKDAY_MAX - $WEEKDAY_MIN))
        num_validations=$(($WEEKDAY_MIN + (RANDOM % $range)))
    fi

    echo "Traitement du ${current_date} (Jour de la semaine: ${day_of_week})"
    echo " -> Nombre de validations √† g√©n√©rer : ${num_validations}"

    # --- Cr√©ation de la structure de r√©pertoires Hive ---
    partition_dir="${HIVE_BASE_DIR}/year=${year}/month=${month}/day=${day}"
    mkdir -p "$partition_dir"
    echo " -> Cr√©ation du r√©pertoire : ${partition_dir}"

    # --- √âtape 1: G√©n√©ration du fichier JSON ---
    echo " -> G√©n√©ration de ${JSON_OUTPUT_FILE}..."
    go run "$GO_SCRIPT" "$num_validations" "$current_date"
    if [ $? -ne 0 ]; then
        echo "ERREUR: La g√©n√©ration du fichier JSON a √©chou√© pour le ${current_date}."
        exit 1
    fi

    # --- √âtape 2: Conversion de JSON vers Parquet ---
    parquet_file="${partition_dir}/validations.parquet"
    echo " -> Conversion en Parquet vers ${parquet_file}..."
    
    duckdb -c "COPY (FROM '${JSON_OUTPUT_FILE}') TO '${parquet_file}' (FORMAT 'PARQUET');"
    if [ $? -ne 0 ]; then
        echo "ERREUR: La conversion en Parquet a √©chou√© pour le ${current_date}."
        exit 1
    fi
    
    # --- √âtape 3: Nettoyage ---
    rm "$JSON_OUTPUT_FILE"
    echo " -> Fichier JSON temporaire supprim√©."
    echo "----------------------------------------------------"

done

echo "Op√©ration termin√©e avec succ√®s."
echo "Toutes les donn√©es ont √©t√© g√©n√©r√©es et stock√©es dans ${HIVE_BASE_DIR}"
